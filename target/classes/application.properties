
## DataSource 연결 정보
spring.profiles.include=db

#--------------------- hibernate -------------------------------

##### table 생성
spring.jpa.hibernate.ddl-auto=none

## create		: 기존 테이블 삭제 후 다시 생성
## create-drop	: create와 같으나 application이 종료 될때 테이블을 drop
## update		: 변경된 부분만 적용
## validate		: 엔티티(Entity, VO)와 테이블이 정상적으로 맵핑 되었는지 확인
## none			: 사용하지 않을 때
## 개발시 편의를 위해 create, create-drop
## 운영시에는 update, validate, none

##### VO클래스의 멤버변수명이 자동으로 DB에 컬럼명과 연결 될때
## regDate 형태면 설정이 필요 (camel case )
## reg_date 형태면 설정이 필요 없음 ( snake case )
spring.jpa.hibernate.naming.physical-strategy=org.hibernate.boot.model.naming.PhysicalNamingStrategyStandardImpl

##### JPA에서 자동으로 생성되고 실행되는 SQL문을 실시간 출력
logging.level.org.hibernate.sql=debug

##### ? 에 맵핑 되는 파라미터 값 출력
logging.level.org.hibernate.type.descriptor.sql.BasicBinder=TRACE

##### 하이버네이트가 실행한 SQL 출력
spring.jpa.show-sql=true

##### 하이버네이트가 실행한 SQL 출력 할 때 보기 쉽게 출력
spring.jpa.properties.hibernate.format_sql=true

##### transaction 처리
spring.aop.proxy-target-class=true 


## FileUpload
## multipart 사용여부
spring.servlet.multipart.enabled=true
## 파일당 최대 파일 크기
spring.servlet.multipart.max-file-size=10MB
## 총 파일 크기 
spring.servlet.multipart.max-request-size=100MB

## JSP View 연결
## pom.xml에 jasper, jstl 추가 확인.
## /WEB-INF/views 폴더를 직접 생성
spring.mvc.view.prefix=/WEB-INF/views/
spring.mvc.view.suffix=.jsp

## File 저장 경로
board.notice=upload/notice
board.qna=upload/qna



